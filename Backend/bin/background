#!/usr/bin/env node

/**
 * Module dependencies
 */
process.env.NODE_ENV = 'staging';
var config = require('../config/config');
process.env.MONGO_DEV_URI=config.db;

var cron          = require('node-schedule');
var logger        = require('../lib/logging')();
var jobQueue      = require('./job-queue.js');
var mongoose      = require("mongoose");
var resources = {};

var setSchedule = function () {
   // Schedule Broadcasts
   
   broadcastRule = new cron.RecurrenceRule();
   broadcastRule.minute = 1;
   broadcastRule.hour = [0,1,2,3,4,5,17,18,19,20,21,22,23];
   cron.scheduleJob(broadcastRule, function () {
      day = new Date();
      hour = day.getUTCHours();
      // day.setHours(hour,0,0,0);
      day.setUTCHours(day.getUTCHours(),0,0,0);
      // switch (hour) {
      //    case 17:
      //       hour = '10am';
      //    break;
      //    case 18:
      //       hour = '11am';
      //    break;
      //    case 19:
      //       hour = '12pm';
      //    break;
      //    case 20:
      //       hour = '1pm';
      //    break;
      //    case 21:
      //       hour = '2pm';
      //    break;
      //    case 22:
      //       hour = '3pm';
      //    break;
      //    case 23:
      //       hour = '4pm';
      //    break;
      //    case 0:
      //       day.setDate(day.getDate() - 1);
      //       hour = '5pm';
      //    break;
      //    case 1:
      //       day.setDate(day.getDate() - 1);
      //       hour = '6pm';
      //    break;
      //    case 2:
      //       day.setDate(day.getDate() - 1);
      //       hour = '7pm';
      //    break;
      //    case 3:
      //       day.setDate(day.getDate() - 1);
      //       hour = '8pm';
      //    break;
      //    case 4:
      //       day.setDate(day.getDate() - 1);
      //       hour = '9pm';
      //    break;
      //    case 5:
      //       day.setDate(day.getDate() - 1);
      //       hour = '10pm';
      //    break;
      // }

      // if (isNaN(hour)) {
         logger.info('Queing ' + hour + ' Broadcasts - ' + day.toISOString());
         // TODO - create sendBroadcast jobs for each timezone that exists in the consumer db
         // TODO - Phase out hour variable, no longer necessary
         jobQueue.queue.enqueue('broadcastQueue', 'sendBroadcast', [day, hour, 'America/Chicago', null]);
         jobQueue.queue.enqueue('broadcastQueue', 'sendBroadcast', [day, hour, 'America/Los_Angeles', null]);
      // }
   });

   // Schedule Alert Collection and Categorization
   collectAlertRule = new cron.RecurrenceRule();
   collectAlertRule.minute = 5;
   //EST 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23 
   //EDT 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0
   collectAlertRule.hour = [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23];
   cron.scheduleJob(collectAlertRule, function () {
      logger.info('Queueing Alert Collection and Categorization Jobs');
      jobQueue.queue.enqueue('alertQueue', 'removeExpired');
      jobQueue.queue.enqueue('alertQueue', 'collectAlerts', 'all');
   });

   // scrapeAlertsRule = new cron.RecurrenceRule();
   // scrapeAlertsRule.minute = 52;
   // scrapeAlertsRule.hour = [0, 1, 2, 3, 4, 5, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23];
   // cron.scheduleJob(scrapeAlertsRule, function () {
   //    logger.info('Queueing Scrape Collection Job');
   //    jobQueue.queue.enqueue('alertQueue', 'scrapeAlerts');
   // });

   // Schedule News Collection and Categorization
   collectNewsRule = new cron.RecurrenceRule();
   collectNewsRule.minute = 20;
   //EST 6, 18 
   //EDT 7, 19
   collectNewsRule.hour = [11, 23];
   cron.scheduleJob(collectNewsRule, function () {
      logger.info('Queueing News Collection Job');
      jobQueue.queue.enqueue('newsQueue', 'collectNews');
   });

   // Schedule More Frequent Runs for Emergency Alert Collection/Categorization
   emergenciesRule = new cron.RecurrenceRule();
   emergenciesRule.minute = 35;
   collectAlertRule.hour = [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23];
   cron.scheduleJob(emergenciesRule, function () {
      logger.info('Queueing Emergency Alert Collection and Categorization');
      jobQueue.queue.enqueue('alertQueue', 'removeExpired');      
      jobQueue.queue.enqueue('alertQueue', 'collectAlerts', 'emergencies');
   });

   // Schedule Find Recalls
   findRecallsRule = new cron.RecurrenceRule();
   findRecallsRule.minute = 45;
   findRecallsRule.hour = [0, 4, 8, 12, 16, 20];
   cron.scheduleJob(findRecallsRule, function () {
      logger.info('Queueing Find Recalls Job');
      jobQueue.queue.enqueue('productQueue', 'findRecalls', 'vehicle');
   });

   // Schedule Daily Incentive Recap Emails
   incentiveRecapRule = new cron.RecurrenceRule();
   incentiveRecapRule.minute = 1;
   incentiveRecapRule.hour = 12;
   cron.scheduleJob(incentiveRecapRule, function () {
      logger.info('Queueing Incentive Recap Job');
      jobQueue.queue.enqueue('companyQueue', 'reviewIncentiveRedemptions', new Date());
   });
};

/*
 * @func connectWithRetry
 * Connect to mongodb. start
 * 
 */
function connectWithRetry() {
    console.log('****************************' + process.env.MONGO_DEV_URI);
    return mongoose.connect(process.env.MONGO_DEV_URI, function (err) {
        if (err) {
            logger.error('Failed to connect to mongo on startup - retrying in 5 sec: ' + JSON.stringify(err, null, 3));
            setTimeout(connectWithRetry, 5000);
        } else {
            logger.info("Database Connection is Open - " + process.env.NODE_ENV);
        }
    });
};

connectWithRetry();

// Waits for jobQueue to initialize and connect, then sets schedule
var run = function () {
   setTimeout(function () {
      if (jobQueue.connected) {
         setSchedule();
      } else {
         run();
      }
   }, 0);
}

process.on('SIGINT', function () {
   logger.info('Interrupt Signal');
   process.exit();
});

run();

module.exports = resources;
